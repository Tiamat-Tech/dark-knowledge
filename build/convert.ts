import { ensureDir, readFile, writeFile } from "fs-extra"
import { minify } from "html-minifier"
import { chunk, exec, getHtmlPath, getPdfPath, htmlDir } from "./support"

/**
 * Optimizes HTML content generated by the PDF converter.
 *
 * @param content
 */
const optimize = (content: string): string =>
  minify(
    content
      // Remove space offset spans.
      .replace(/<span class="_( _[\d\w]{1,2})?"> <\/span>/gm, " ")
      // Remove non-space offset spans.
      .replace(
        /<span class="_( _[\d\w]{1,2})?"><\/span>/gm,
        "",
      )
      // Replace background with css pattern.
      .replace(
        `</head>`,
        `
        <style type="text/css">
        #page-container {
            background-color: #3d3d3d !important;
            opacity: 1 !important;
            background-image:
            repeating-radial-gradient( circle at 0 0, transparent 0, #3d3d3d 40px ), repeating-linear-gradient( #3d3d3d55, #3d3d3d ) !important;
        }
        </style>
        </head>
        `.trim(),
      ),
    {
      minifyJS: true,
      minifyCSS: false,
      removeRedundantAttributes: true,
      removeOptionalTags: true,
      collapseBooleanAttributes: true,
    },
  )

/**
 * Converts all PDF files in batches.
 */
export const convert = async (filenames: string[]) => {
  await ensureDir(htmlDir)

  const batchLength: number = 10
  const batches: string[][] = chunk(filenames, batchLength)

  const batchesLength: number = batches.length

  console.log(
    `Converting ${filenames.length} pdf files in ${batchesLength} batches of ${batchLength} items.`,
  )

  let currentBatch: number = 0
  for (const batch of batches) {
    currentBatch++
    await Promise.all(batch.map(async (filename, index) => {
      try {
        const pdfPath: string = getPdfPath(filename)
        const htmlPath: string = getHtmlPath(filename)
        const shortname: string = filename.substring(0, 32)
        const prefix: string = ` [${
          index + 1
        }/${batchLength}][${currentBatch}/${batchesLength}]`

        console.log(
          `⏱ ${prefix} Converting "${shortname}..."`,
        )
        const { stderr } = await exec("/usr/local/bin/pdf2htmlEX", [
          "--zoom 2",
          "--optimize-text 1",
          "--bg-format jpg",
          "--decompose-ligature 1",
          "--printing 0",
          "--embed-external-font 0",
          "--no-drm 1",
          "--heps 3",
          "--space-as-offset 1",
          "--dest-dir",
          htmlDir,
          `"${pdfPath}"`,
        ])
        if (stderr) {
          console.warn(stderr)
        }

        const content: string = optimize((await readFile(htmlPath)).toString())

        await writeFile(htmlPath, content)

        console.log(
          `✅ ${prefix} Converted "${shortname}..."`,
        )
      } catch (error) {
        console.error(
          `⚠ [${index}] Conversion error: ${(error as Error).message}`,
        )
      }
    }))
  }
}
